<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>concurrent on mxinden</title>
    <link>https://max-inden.de/tags/concurrent/</link>
    <description>Recent content in concurrent on mxinden</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 01 Apr 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://max-inden.de/tags/concurrent/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Elimination back-off stack performance</title>
      <link>https://max-inden.de/blog/2020-04-01-elimination-backoff-stack-performance/</link>
      <pubDate>Wed, 01 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://max-inden.de/blog/2020-04-01-elimination-backoff-stack-performance/</guid>
      <description>I recently stumbled upon the idea of an Elimination Back-off Stack promising to be a parallel, linearizable and lock-free stack. In case you are not familiar with it, I would suggest either reading my previous post or the corresponding paper [1] itself. Being quite intrigued by the ideas of the above stack I wrote my own implementation in Rust with a little help from crossbeam.
In this post I will compare my implementation to other stack implementations.</description>
    </item>
    
    <item>
      <title>Elimination back-off stack</title>
      <link>https://max-inden.de/blog/2020-03-28-elimination-backoff-stack/</link>
      <pubDate>Sat, 28 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://max-inden.de/blog/2020-03-28-elimination-backoff-stack/</guid>
      <description>Reading The Art of Multiprocessor Programming [1] I came across the Elimination Back-off Stack [2] datastructure introduced in 2004 by Danny Hendler, Nir Shavit, and Lena Yerushalmi. It promises to be a parallel lock-free stack.
How can a stack allow parallel operations without going through a single serialization point, e.g. a Mutex or an Atomic? Let&amp;rsquo;s dive into it.
A lock-free stack A lock-free stack, also often referred to as a Treiber stack [3] due to Kent Treiber, operates on top of a lock-free linked list.</description>
    </item>
    
  </channel>
</rss>

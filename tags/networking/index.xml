<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Networking on Max Inden</title>
    <link>https://max-inden.de/tags/networking/</link>
    <description>Recent content in Networking on Max Inden</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 14 Sep 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://max-inden.de/tags/networking/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Fast UDP I/O for Firefox in Rust</title>
      <link>https://max-inden.de/post/fast-udp-io-in-firefox/</link>
      <pubDate>Sun, 14 Sep 2025 00:00:00 +0000</pubDate>
      <guid>https://max-inden.de/post/fast-udp-io-in-firefox/</guid>
      <description>&lt;h2 id=&#34;motivation&#34;&gt;Motivation&lt;/h2&gt;
&lt;p&gt;Firefox uses &lt;a href=&#34;https://www-archive.mozilla.org/projects/nspr/&#34;&gt;NSPR&lt;/a&gt; for most of its network I/O.
When it comes to UDP I/O, NSPR only offers a limited set of dated APIs, most relevant here &lt;a href=&#34;https://firefox-source-docs.mozilla.org/nspr/reference/pr_sendto.html&#34;&gt;&lt;code&gt;PR_SendTo&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://firefox-source-docs.mozilla.org/nspr/reference/pr_recvfrom.html&#34;&gt;&lt;code&gt;PR_RecvFrom&lt;/code&gt;&lt;/a&gt;, wrappers around POSIX&amp;rsquo;s &lt;code&gt;sendto&lt;/code&gt; and &lt;code&gt;recvfrom&lt;/code&gt;.
The N in NSPR stands for Netscape, giving you a hint of its age.&lt;/p&gt;
&lt;p&gt;Operating systems have evolved since.
Many offer multi-message APIs like &lt;code&gt;sendmmsg&lt;/code&gt; and &lt;code&gt;recvmmsg&lt;/code&gt;.
Some offer segmentation offloading like GSO (Generic Segmentation Offload) and GRO (Generic Receive Offload).
Each of these promise significant performance improvements for UDP I/O.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Optimizing Yamux Flow Control - Sending Window Update Frames Early</title>
      <link>https://max-inden.de/post/2021-03-07-optimizing-yamux-flow-control/</link>
      <pubDate>Sun, 07 Mar 2021 00:00:00 +0000</pubDate>
      <guid>https://max-inden.de/post/2021-03-07-optimizing-yamux-flow-control/</guid>
      <description>&lt;p&gt;Below is a summary of our efforts to optimize flow control in the &lt;a href=&#34;https://github.com/paritytech/yamux&#34;&gt;Rust Yamux
implementation&lt;/a&gt;. While not a novel
approach, I still find the end result worth sharing thus my forum post.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://discuss.libp2p.io/t/optimizing-yamux-flow-control-sending-window-update-frames-early/843&#34;&gt;https://discuss.libp2p.io/t/optimizing-yamux-flow-control-sending-window-update-frames-early/843&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Know your latencies</title>
      <link>https://max-inden.de/post/2020-06-19-latencies/</link>
      <pubDate>Fri, 19 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://max-inden.de/post/2020-06-19-latencies/</guid>
      <description>&lt;p&gt;I find it helpful to know the orders of magnitude by which certain computer
operations differ. Certainly it is not worth the effort to pay attention to
every digit or learn these by heart, especially since they differ (slightly)
across systems, but having a basic understanding of what a tiny fraction of time
a CPU cycle occupies compared to sending a TCP packet is incredibly helpful
whenever reasoning about systems performance.&lt;/p&gt;</description>
    </item>
    <item>
      <title>25th DistSys Reading Group - Fair queuing</title>
      <link>https://max-inden.de/post/2020-04-27-25th-paper-club/</link>
      <pubDate>Mon, 27 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://max-inden.de/post/2020-04-27-25th-paper-club/</guid>
      <description>&lt;p&gt;In the session today we covered Madhavapeddi Shreedhar and George Varghese paper
&amp;ldquo;&lt;em&gt;Efficient fair queuing using deficit round-robin&lt;/em&gt;&amp;rdquo; [1]. While the session was
not so much about the relatively simple algorithmic details of
deficit-round-robin (still worth checking out) we talked about:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Its benefits over basic FIFO queuing and thus its impact for congestion
controlled traffic (tcp) compared to not congestion controlled traffic (udp).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Its wide deployment still seen today.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Its derivatives DRR+ and DRR++ being able to handle both best-effort as well
as latency critical flows.&lt;/p&gt;</description>
    </item>
    <item>
      <title>24th DistSys Reading Group - BBR Congestion-Based Congestion Control</title>
      <link>https://max-inden.de/post/2020-04-06-24th-paper-club/</link>
      <pubDate>Mon, 06 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://max-inden.de/post/2020-04-06-24th-paper-club/</guid>
      <description>&lt;p&gt;After a bit of a break due to current pandemic we decided to carry on and
continue our meetings as virtual calls. Ignoring the usual initial hiccups and
the missing whiteboard the medium worked well for us.&lt;/p&gt;
&lt;p&gt;Topic and reading of this session was the ACM Queue article &lt;a href=&#34;https://queue.acm.org/detail.cfm?id=3022184&#34;&gt;&lt;em&gt;BBR:
Congestion-Based Congestion
Control&lt;/em&gt;&lt;/a&gt; [1], as well as the
Dropbox article &lt;a href=&#34;https://dropbox.tech/infrastructure/evaluating-bbrv2-on-the-dropbox-edge-network&#34;&gt;&lt;em&gt;Evaluating BBRv2 on the Dropbox Edge
Network&lt;/em&gt;&lt;/a&gt;
[2].&lt;/p&gt;
&lt;p&gt;We started off with a quick recap of the previous session covering why we need
congestion control, how one can view a multi-hop connection as a single hop
connection with a single bottleneck and most importantly the fact that the
Internet is the largest distributed system that most of the time &amp;ldquo;just works&amp;rdquo;
due to congestion control.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>

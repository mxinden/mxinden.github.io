<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Libp2p on Max Inden</title>
    <link>https://max-inden.de/tags/libp2p/</link>
    <description>Recent content in Libp2p on Max Inden</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 29 Feb 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://max-inden.de/tags/libp2p/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Stepping down as a (rust-) libp2p maintainer</title>
      <link>https://max-inden.de/post/2024-02-29-stepping-down/</link>
      <pubDate>Thu, 29 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://max-inden.de/post/2024-02-29-stepping-down/</guid>
      <description>&lt;p&gt;I don&amp;rsquo;t see myself making major contributions to (rust-) libp2p in the near future and thus I am stepping down as a maintainer.&lt;/p&gt;
&lt;p&gt;As announced before, &lt;a href=&#34;https://github.com/libp2p/rust-libp2p/discussions/5007&#34;&gt;I have left Protocol Labs in December 2023&lt;/a&gt;.
After a 2 month re-orientation break, I have decided to move on entirely.&lt;/p&gt;
&lt;p&gt;My first commit was 5y ago, &lt;a href=&#34;https://github.com/libp2p/rust-libp2p/pull/1204&#34;&gt;a small bug fix in our address handling&lt;/a&gt;.
Since then lots happened. A couple of milestones I was involved in:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Talk &#34;Connecting everything, everywhere, all at once&#34; @IPFS-Thing</title>
      <link>https://max-inden.de/post/2023-04-16-connecting-everything-everywhere-all-at-once/</link>
      <pubDate>Sun, 16 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://max-inden.de/post/2023-04-16-connecting-everything-everywhere-all-at-once/</guid>
      <description>&lt;p&gt;How you can connect everything (browsers &amp;amp; non-browsers), everywhere (public or private), all at once (using libp2p).&lt;/p&gt;
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
      &lt;iframe allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen=&#34;allowfullscreen&#34; loading=&#34;eager&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; src=&#34;https://www.youtube-nocookie.com/embed/4v-iIB0C9_8?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; title=&#34;YouTube video&#34;&gt;&lt;/iframe&gt;
    &lt;/div&gt;

&lt;p&gt;&lt;a href=&#34;https://bafybeidyb3fucxaq32cm6vf6q5ziaah6foe5caggwsitlm7myd4pwpcgdq.ipfs.w3s.link/connecting-everything-everywhere-all-at-once-with-libp2p.pdf&#34;&gt;Slides&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Talk &#34;DOS Defense - Do’s and Don’ts&#34; @IPFS-Camp</title>
      <link>https://max-inden.de/post/2022-11-02-dos-defense-dos-and-donts/</link>
      <pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://max-inden.de/post/2022-11-02-dos-defense-dos-and-donts/</guid>
      <description>&lt;p&gt;I presented at IPFS Camp 2022 on mitigating Denial-of-Service attacks in
peer-to-peer networks. I discussed resource management strategies such as
enforcing backpressure and provided examples of coding pitfalls to avoid in Rust
and Go. You can find the recording and slides of my talk below.&lt;/p&gt;
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
      &lt;iframe allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen=&#34;allowfullscreen&#34; loading=&#34;eager&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; src=&#34;https://www.youtube-nocookie.com/embed/jZrAnnFO-2c?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; title=&#34;YouTube video&#34;&gt;&lt;/iframe&gt;
    &lt;/div&gt;

&lt;h1 id=&#34;slides&#34;&gt;Slides&lt;/h1&gt;
&lt;h2 id=&#34;dos&#34;&gt;DOS&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Denial-of-service attack&lt;/li&gt;
&lt;li&gt;Hard in peer-to-peer as identities are cheap&lt;/li&gt;
&lt;li&gt;Relevant for any scarce resource, e.g. CPU, memory(, file descriptors)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;dos-1&#34;&gt;Do&amp;rsquo;s&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Bound EVERYTHING&lt;/li&gt;
&lt;li&gt;Once a bound is exceeded:
&lt;ul&gt;
&lt;li&gt;Drop item (&lt;del&gt;good&lt;/del&gt;)&lt;/li&gt;
&lt;li&gt;Enforce backpressure (good)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;dos-2&#34;&gt;Do&amp;rsquo;s&lt;/h2&gt;
&lt;h3 id=&#34;backpressure&#34;&gt;Backpressure&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Slow consumer should slow down a fast producer&lt;/li&gt;
&lt;li&gt;Can improve resource utilization&lt;/li&gt;
&lt;li&gt;Can improve latency&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;donts&#34;&gt;Don&amp;rsquo;ts&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Decode the length prefix of a message.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; l &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; uvi::decode::&lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt;(msg_len_prefix)&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Allocate a corresponding buffer.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; buffer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vec![&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; l];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Read message into buffer.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;socket.read_exact(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; buffer)&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;donts-1&#34;&gt;Don&amp;rsquo;ts&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Receive a request.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;incomingRequests&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Handle the request.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;handleRequest&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;donts-2&#34;&gt;Don&amp;rsquo;ts&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;loop&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Receive a request.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; request &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; incoming_requests.next().&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Handle the request.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  spawn(&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;move&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      handle(request)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;donts-3&#34;&gt;Don&amp;rsquo;ts&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;loop&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Receive a request.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; request &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; incoming_requests.next().&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Send the request somewhere else.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  request_channel.unbounded_send(request);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;donts-4&#34;&gt;Don&amp;rsquo;ts&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Buffer of requests
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; to_be_handled_later &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Vec::new();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; request &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; incoming_requests.next().&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;to_be_handled_later.push(request);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Talk &#34;Hole punching in the wild&#34; @FOSDEM</title>
      <link>https://max-inden.de/post/2023-02-05-hole-punching-in-the-wild/</link>
      <pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://max-inden.de/post/2023-02-05-hole-punching-in-the-wild/</guid>
      <description>&lt;p&gt;Dennis and I presented &lt;em&gt;Hole punching in the wild&lt;/em&gt;, &lt;em&gt;learnings from running libp2p hole punching in production, measured from vantage points across the globe&lt;/em&gt; in the network devroom at FOSDEM 2023.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;At FOSDEM 2022 I presented libp2p&amp;rsquo;s hole punching mechanism, overcoming NATs and firewalls with no dependencies on central infrastructure. One year has passed since. We rolled it out to live networks. We launched a large measurement campaign with many volunteers deploying vantage points in their home network, punching holes across the globe.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Talk &#34;Peer-to-peer Browser Connectivity&#34; @FOSDEM</title>
      <link>https://max-inden.de/post/2023-02-05-peer-to-peer-browser-connectivity/</link>
      <pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://max-inden.de/post/2023-02-05-peer-to-peer-browser-connectivity/</guid>
      <description>&lt;p&gt;I presented an overview on &lt;em&gt;Peer-to-peer Browser Connectivity&lt;/em&gt; options in the network devroom at FOSDEM 2023.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Connecting from the browser to a public server with a valid TLS certificate is easy. But what if the server has a self-signed certificate? What if it isn&amp;rsquo;t public? What if it is another browser?&lt;/p&gt;
&lt;p&gt;This talk covers the intricacies of browser communication beyond the standard browser-to-server use-case. I will give an overview of the many protocols available and how they can be used in a peer-to-peer fashion without sacrificing authenticity, confidentiality or integrity. We will leverage the new WebTransport for secure communication to public servers with self-signed certificates and WebRTC for secure communication to other browsers, using hole puching, without the dependency on central infrastructure.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Talk &#34;Hole punching with libp2p&#34; @p2p-paris</title>
      <link>https://max-inden.de/post/2022-04-30-hole-punching-with-libp2p/</link>
      <pubDate>Sat, 30 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://max-inden.de/post/2022-04-30-hole-punching-with-libp2p/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;We’ll take a closer look at the recently added decentralized hole punching
feature, allowing NAT and firewall traversal without the need for any central
coordination servers (STUN and TURN).&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/MCEEMrIRks8&#34;&gt;Recording&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Talk &#34;Introduction to and State of libp2p&#34; @p2p-paris</title>
      <link>https://max-inden.de/post/2022-04-29-introduction-to-and-state-of-libp2p/</link>
      <pubDate>Fri, 29 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://max-inden.de/post/2022-04-29-introduction-to-and-state-of-libp2p/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;We will discuss the current state of the project, eyeball the various language
implementations, take a look at the many live networks running on top of
libp2p today and finally cover the project roadmap for the years to come.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/Sbd7odDFT1w&#34;&gt;Recording&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hole punching in libp2p</title>
      <link>https://max-inden.de/post/2022-03-06-libp2p-hole-punching/</link>
      <pubDate>Sun, 06 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://max-inden.de/post/2022-03-06-libp2p-hole-punching/</guid>
      <description>&lt;p&gt;We have been working on hole punching support in libp2p for the last year. It
finally landed in the Go and Rust libp2p implementation.&lt;/p&gt;
&lt;p&gt;Read all about it on the IPFS blog:
&lt;a href=&#34;https://blog.ipfs.io/2022-01-20-libp2p-hole-punching/&#34;&gt;https://blog.ipfs.io/2022-01-20-libp2p-hole-punching/&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Talk &#34;Peer-to-peer hole punching without centralized infrastructure&#34; @FOSDEM</title>
      <link>https://max-inden.de/post/peer-to-peer-hole-punching-without-centralized-infrastructure/</link>
      <pubDate>Sun, 06 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://max-inden.de/post/peer-to-peer-hole-punching-without-centralized-infrastructure/</guid>
      <description>&lt;p&gt;Gave a talk on hole punching in libp2p at FOSDEM 2022.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Peer-to-peer hole punching without centralized infrastructure&lt;/p&gt;
&lt;p&gt;How libp2p can traverse NATs and firewalls without coordination through
central STUN and TURN servers.&lt;/p&gt;
&lt;p&gt;libp2p is a universal, cross-platform, multi-language, modular peer-to-peer
networking library powering multiple large-scale networks, for example IPFS.&lt;/p&gt;
&lt;p&gt;In the first part of the talk we’ll present the basic building blocks of the
library and explain how they fit together. In the second part, we’ll take a
closer look at the recently added decentralized hole punching feature,
allowing NAT and firewall traversal without the need for any central
coordination servers (STUN and TURN).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Talk &#34;State of libp2p&#34; @FOSDEM</title>
      <link>https://max-inden.de/post/state-of-libp2p/</link>
      <pubDate>Sun, 06 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://max-inden.de/post/state-of-libp2p/</guid>
      <description>&lt;p&gt;Gave a talk on the state of libp2p at FOSDEM 2022.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;State of libp2p&lt;/p&gt;
&lt;p&gt;Status quo and future roadmap of the peer-to-peer networking library libp2p.&lt;/p&gt;
&lt;p&gt;libp2p is a universal, cross-platform, multi-language, modular peer-to-peer
networking library powering multiple large-scale networks, for example IPFS,
Ethereum 2, Filecoin or Polkadot.&lt;/p&gt;
&lt;p&gt;We will discuss the current state of the project, eyeball the various language
implementations, take a look at the many live networks running on top of
libp2p today and finally cover the project roadmap for the years to come.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>

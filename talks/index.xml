<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Talks on mxinden</title>
    <link>https://max-inden.de/talks/</link>
    <description>Recent content in Talks on mxinden</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 20 Jul 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://max-inden.de/talks/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Intro to libp2p</title>
      <link>https://max-inden.de/talks/intro-to-libp2p/</link>
      <pubDate>Tue, 20 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://max-inden.de/talks/intro-to-libp2p/</guid>
      <description>On Tuesday 20th of July I gave a talk introducing libp2p, a modular network stack.
 Recording Slides  </description>
    </item>
    
    <item>
      <title>Optimizing Metric Rendering in kube-state-metrics</title>
      <link>https://max-inden.de/talks/optimizing-metric-rendering-in-kube-state-metrics/</link>
      <pubDate>Wed, 22 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://max-inden.de/talks/optimizing-metric-rendering-in-kube-state-metrics/</guid>
      <description>Kube-state-metrics exposes Prometheus metrics of the state of a given Kubernetes cluster. The project uses the standard Prometheus client Golang library, which is not optimized for the very specific use case of kube-state-metrics.
This talk covers different optimizations like metric caching and improved text marshaling dividing CPU usage by a factor of 6 and memory and response time by a factor of 3 through introducing an intelligent Prometheus metric cache in the code hot path and optimizing memory allocations during response generation.</description>
    </item>
    
    <item>
      <title>Self-Service Monitoring</title>
      <link>https://max-inden.de/talks/self-service-monitoring/</link>
      <pubDate>Wed, 26 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://max-inden.de/talks/self-service-monitoring/</guid>
      <description>Monitoring plays a crucial role in a microservice architecture. Restricting the management and configuration of the monitoring stack to the operations team results in workflow bottlenecks. Instead one could provide a self-service monitoring platform, enabling each team to easily setup monitoring for their applications and customize it to their needs. This gives each team the ability to deeply introspect their application, benchmark new features and alert on failures on their own.</description>
    </item>
    
    <item>
      <title>Self-healing Kubernetes</title>
      <link>https://max-inden.de/talks/self-healing-k8s/</link>
      <pubDate>Sun, 22 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://max-inden.de/talks/self-healing-k8s/</guid>
      <description>What If Component xxx Dies? Introducing Self-Healing Kubernetes
Kubernetes promises healing your application on all kinds of failure scenarios, but why not self-heal Kubernetes itself?
This talk introduces self-hosted Kubernetes (K8s inside itself) to autonomously recover from failure scenarios with the help of e.g. itself, systemd and checkpointing. We will ask and answer questions like “What happens when xxx dies”. The theory will be followed by a demo on a live cluster showcasing what happens when we kill central Kubernetes components, like the API-Server.</description>
    </item>
    
    <item>
      <title>End-to-end monitoring with the Prometheus Operator</title>
      <link>https://max-inden.de/talks/end-to-end-monitoring-with-the-prometheus-operator/</link>
      <pubDate>Sat, 19 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://max-inden.de/talks/end-to-end-monitoring-with-the-prometheus-operator/</guid>
      <description>Kubernetes is a powerful system to build and operate a modern cloud-native infrastructure. Monitoring with Prometheus ensures that Kubernetes stays healthy. Prometheus is a stateful application, so operating it in a cloud native environment can be a challenging task. The Prometheus Operator makes running highly available Prometheus clusters, and even an entire end to end monitoring pipeline, easily manageable. Max will explain the functionality of the Prometheus Operator and describe a desirable end-to-end monitoring stack, including alerts and dashboards.</description>
    </item>
    
    <item>
      <title>Intro to Kubernetes</title>
      <link>https://max-inden.de/talks/introduction-to-k8s/</link>
      <pubDate>Sat, 19 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://max-inden.de/talks/introduction-to-k8s/</guid>
      <description>Distributing and deploying software inside (Docker-) containers for security, isolation and ease of use is the new big thing. But once you got all your services nicely wrapped - who takes care of all these containers?
The open source project Kubernetes, originating from Google, helps you manage containerized applications, as the operating system of your datacenter, treating hundreds of machines as a single resource pool. This talk introduces the core concepts of Kubernetes, its benefits and its huge ecosystem and gives you an idea of how Google controls parts of their gigantic infrastructure.</description>
    </item>
    
    <item>
      <title>Improving user and developer experience of the Alertmanager UI</title>
      <link>https://max-inden.de/talks/improving-user-and-developer-experience-of-the-alertmanager-ui/</link>
      <pubDate>Fri, 18 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://max-inden.de/talks/improving-user-and-developer-experience-of-the-alertmanager-ui/</guid>
      <description>Alertmanager deduplicates, groups, and routes alerts from Prometheus to all kinds of paging services. With it comes a dated UI which does not live up to the expectations of the users, nor does it attract new contributors.
From this talk, you will learn how we addressed these issues when building the new UI from scratch. We made it friendlier to users by removing unnecessary domain language noise. In addition we added new power features such as filtering and grouping.</description>
    </item>
    
  </channel>
</rss>
